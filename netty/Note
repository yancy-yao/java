《Netty权威指南》：
Tomcat与Servlet的同步阻塞I/O模型
基于Reactor模型统一调度的长连接和短连接协议栈。

I/O多路复用技术

I/O发展简史
    2002年，jdk1.4，新增了个java.nio包，提供了很多进行异步I/O开发的API和类库，主要的类和接口如下：
        进行异步I/0操作的缓冲区ByteBuffer等；
        进行异步I/O操作的管道Pipe；
        进行各种I/O操作（异步或者同步）的Channel，包括ServerSocketChannel和SocketChannel；
        多种字符集的编码能力和解码能力；
        实现非阻塞I/O操作的多路复用器selector；
        基于流行的Perl实现的正则表达式类库；
        文件管道FileChannel。

     2011年，jdk1.7，NIO库升级为NIO2.0，改进部分：
        提供能够批量获取文件属性的API；
        提供AIO功能，支持基于文件的异步I/O操作和针对网络套接字的异步操作；
        完成JSR-51定义的通道功能。

BIO同步阻塞式、NIO非阻塞、AIO异步非阻塞。

BIO:
    Java输入流InputStream源码.
        当对Socket的输入流进行读取操作的时候，它会一直阻塞下去，直到发生如下三种事情：
            有数据可读；
            可用数据已经读取完毕；
            发生空指针或者I/O异常。

    Java输入流OutputStream源码.
        当调用OutputStream的write方法写输出流的时候，它将会被阻塞，直至所有要发送的字节全部写入完毕，或者发生异常。

        TCP/IP：当消息的接收处理缓慢的时候，将不能及时地从TCP缓冲区读取数据，这将会导致发送方的TCP windows size不断
     减小，直到为0，双方处于Keep-Alive状态，消息发送方将不能再向TCP缓冲区写入消息，这时如果采用的是同步阻塞I/O，write
     操作将会被无限期阻塞，直到TCP windows size大于0或者发生I/O异常。

NIO:
    1.缓冲区Buffer
        在NIO库中，所有数据都是用缓冲区处理的。
        缓冲区实质上是一个数组。通常他是一个字节数组（ByteBuffer)，也可以使用其他种类的数组。但是一个缓冲区不仅仅是
     一个数组。
        最常用的缓冲区是ByteBuffer。

    2.通道Channel
        可以通过它读取或写入数据，网络数据通过Channel读取和写入。通道与流的不同之处在于通道是双向的。
      Channel源码阅读
        分为两大类：用于网络读写的SelectableChannel和用于文件操作的FileChannel。

    3.多路复用器Selector（NIO编程的基础）
        Selector会不断地轮询注册在其上的Channel，如果某个Channel上面有新的TCP连接接入、读和写事件，这个Channel就处于
     就绪状态，会被Selector轮询出来，然后通过SelectionKey可以获取就绪Channel的集合，进行后续的I/O操作。
